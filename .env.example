# Stream Daemon Environment Variables
# Copy this file to .env and fill in your values
# NEVER commit .env to git!
#
# ⚠️ CRITICAL: SECRETS MANAGER USERS - READ THIS! ⚠️
#
# If you're using Doppler, AWS Secrets Manager, or Vault:
# 1. Configure the SECRETS section at the bottom of this file
# 2. COMMENT OUT all sensitive credentials (API keys, tokens, passwords, webhooks)
# 3. Keep non-sensitive settings (usernames, URLs, enable flags) uncommented
#
# WHY? Environment variables take PRIORITY over secrets managers!
# If a credential is set in .env, Stream Daemon will NEVER fetch it from Doppler/AWS/Vault.
# 
# Example - Using Doppler for Twitch:
#   TWITCH_ENABLE=True                    ← Keep (non-sensitive)
#   TWITCH_USERNAME=chiefgyk3d           ← Keep (non-sensitive)
#   # TWITCH_CLIENT_ID=abc123            ← COMMENT OUT (let Doppler provide it)
#   # TWITCH_CLIENT_SECRET=xyz789        ← COMMENT OUT (let Doppler provide it)
#
# What to COMMENT OUT when using secrets managers:
#   - API Keys (YOUTUBE_API_KEY)
#   - Client IDs and Secrets (TWITCH_CLIENT_ID, TWITCH_CLIENT_SECRET, KICK_*)
#   - Access Tokens (MASTODON_ACCESS_TOKEN, MASTODON_CLIENT_ID, MASTODON_CLIENT_SECRET)
#   - App Passwords (BLUESKY_APP_PASSWORD)
#   - Webhook URLs (DISCORD_WEBHOOK_URL)
#
# What to KEEP when using secrets managers:
#   - Platform enables (TWITCH_ENABLE, MASTODON_ENABLE_POSTING)
#   - Usernames (TWITCH_USERNAME, YOUTUBE_USERNAME, BLUESKY_HANDLE)
#   - Public URLs (MASTODON_API_BASE_URL)
#   - App names (MASTODON_APP_NAME)
#   - Settings (SETTINGS_CHECK_INTERVAL, MESSAGES_*)
#   - Secrets manager config (SECRETS_SECRET_MANAGER, DOPPLER_TOKEN)
#
# See DOPPLER_GUIDE.md for complete setup instructions!

# =====================================
# STREAMING PLATFORMS (At least ONE required)
# =====================================

# Twitch API Credentials
# HOW TO GET:
#   1. Go to https://dev.twitch.tv/console/apps
#   2. Click "Register Your Application"
#   3. Name: "Stream Daemon" (or your choice)
#   4. OAuth Redirect URL: http://localhost (required but not used by Stream Daemon)
#   5. Category: Choose relevant category (e.g., "Application Integration")
#   6. Click "Create" and copy your Client ID
#   7. Click "New Secret" to generate Client Secret (copy immediately, can't view again!)
TWITCH_ENABLE=True
TWITCH_USERNAME=your_twitch_username
# Option 1: Set credentials directly (for testing/local development)
TWITCH_CLIENT_ID=YOUR_TWITCH_CLIENT_ID
TWITCH_CLIENT_SECRET=YOUR_TWITCH_CLIENT_SECRET
# Option 2: Use secrets manager (RECOMMENDED - see DOPPLER_GUIDE.md)
# Comment out the credentials above and configure SECRETS section below

# YouTube Live API Credentials
# HOW TO GET:
#   1. Go to https://console.cloud.google.com/
#   2. Create New Project → Name it "Stream Daemon"
#   3. Go to "APIs & Services" → "Library"
#   4. Search "YouTube Data API v3" and click "Enable"
#   5. Go to "APIs & Services" → "Credentials"
#   6. Click "Create Credentials" → "API Key"
#   7. Copy the API key
#   8. (Optional but recommended) Click "Restrict Key" → Select "YouTube Data API v3"
YOUTUBE_ENABLE=False
YOUTUBE_USERNAME=@YourChannelHandle
# YOUTUBE_CHANNEL_ID is OPTIONAL - will be auto-resolved from username
# Only set this if you want to skip the channel lookup (slightly faster)
# YOUTUBE_CHANNEL_ID=YOUR_YOUTUBE_CHANNEL_ID
# Option 1: Set API key directly (for testing/local development)
YOUTUBE_API_KEY=YOUR_YOUTUBE_API_KEY
# Option 2: Use secrets manager (RECOMMENDED - see DOPPLER_GUIDE.md)
# Comment out the API key above and configure SECRETS section below

# Kick.com Credentials
# HOW TO GET:
#   1. Login to https://kick.com
#   2. Make sure 2FA is enabled (Settings → Security)
#   3. Go to Settings → Developer
#   4. Create a new application
#   5. Scopes/Permissions: Select "Read Access" (required for stream status checks)
#   6. Copy your Client ID and Client Secret
# NOTE: Kick authentication is OPTIONAL. Without it, Stream Daemon uses public API
#       (works but has lower rate limits). With auth, you get better reliability.
KICK_ENABLE=False
KICK_USERNAME=your_kick_username
# Optional: Kick authentication for better rate limits (recommended)
# Option 1: Set credentials directly (for testing/local development)
KICK_CLIENT_ID=YOUR_KICK_CLIENT_ID
KICK_CLIENT_SECRET=YOUR_KICK_CLIENT_SECRET
# Option 2: Use secrets manager (RECOMMENDED - see DOPPLER_GUIDE.md)
# Comment out the credentials above and configure SECRETS section below

# ===========================================
# MESSAGE FILES
# ===========================================
# MESSAGE FILES & POSTING STRATEGIES
# ===========================================

# Consolidated message files with platform sections
# Format: Use [PLATFORM] sections for platform-specific messages, or [DEFAULT] for all
# Example:
#   [DEFAULT]
#   Generic message 1
#   [TWITCH]
#   Twitch-specific message 1
MESSAGES_MESSAGES_FILE=messages.txt
MESSAGES_END_MESSAGES_FILE=end_messages.txt

# Control whether to use platform-specific sections or always use [DEFAULT]
# If true: Uses [TWITCH], [YOUTUBE], [KICK] sections when available, falls back to [DEFAULT]
# If false: Always uses [DEFAULT] section for all platforms (same message everywhere)
MESSAGES_USE_PLATFORM_SPECIFIC_MESSAGES=True

# ===========================================
# MULTI-PLATFORM POSTING STRATEGIES
# ===========================================

# LIVE_THREADING_MODE: How to handle "going live" posts when streaming to multiple platforms
# Options:
#   - separate: Each platform gets its own standalone post (no threading)
#               Example: "Live on Twitch!" then "Live on YouTube!" as separate posts
#   
#   - thread: Each platform announcement is threaded to the previous one
#             Example: "Live on Twitch!" → "Also live on YouTube!" as a reply thread
#   
#   - combined: Single post announcing all platforms at once
#               Example: "Live on Twitch, YouTube, and Kick!"
#               Note: In this mode, the message will include all live platforms
MESSAGES_LIVE_THREADING_MODE=separate

# END_THREADING_MODE: How to handle "stream ended" posts
# Options:
#   - disabled: Don't post any stream end messages
#   
#   - separate: Each platform end gets its own post (no threading to live announcement)
#               Example: "Twitch stream ended!" "YouTube stream ended!" as separate posts
#   
#   - thread: Each end message is threaded as a reply to that platform's live announcement
#             Example: "Live on Twitch!" → "Stream ended, thanks for watching!"
#   
#   - combined: Single post when each platform ends, listing that specific platform
#               Example: "Twitch and YouTube streams ended!" (when both end simultaneously)
#   
#   - single_when_all_end: Wait until ALL enabled streaming platforms have ended, 
#                          then post ONE final message
#                          Example: If streaming to Twitch, YouTube, and Kick, wait until
#                          all three have gone offline before posting "All streams ended!"
#                          Useful when platforms might fail at different times
MESSAGES_END_THREADING_MODE=thread

# Legacy option for backwards compatibility (if END_THREADING_MODE=disabled, this is ignored)
# Set to False to disable end messages (same as END_THREADING_MODE=disabled)
MESSAGES_POST_END_STREAM_MESSAGE=True

# =====================================
# SOCIAL PLATFORMS (At least ONE required)
# =====================================

# Mastodon API Credentials
# HOW TO GET:
#   1. Login to your Mastodon instance (e.g., mastodon.social)
#   2. Go to Settings → Development
#   3. Click "New Application"
#   4. Name: "Stream Daemon"
#   5. Scopes/Permissions:
#      - Check "read:accounts" (REQUIRED - allows verifying your credentials)
#      - Check "write:statuses" (REQUIRED - allows posting status updates)
#      - Check "write:media" (optional - if you plan to attach images/videos)
#   6. Redirect URI: Leave default or use "urn:ietf:wg:oauth:2.0:oob"
#   7. Click "Submit"
#   8. Copy ALL THREE credentials from the Mastodon page:
#      - "Client key" → Use as MASTODON_CLIENT_ID
#      - "Client secret" → Use as MASTODON_CLIENT_SECRET
#      - "Your access token" → Use as MASTODON_ACCESS_TOKEN
MASTODON_ENABLE_POSTING=True
MASTODON_APP_NAME=StreamDaemon
MASTODON_API_BASE_URL=https://mastodon.social
# Option 1: Set credentials directly (for testing/local development)
MASTODON_CLIENT_ID=your_mastodon_client_id
MASTODON_CLIENT_SECRET=your_mastodon_client_secret
MASTODON_ACCESS_TOKEN=your_mastodon_access_token
# Option 2: Use secrets manager (RECOMMENDED - see DOPPLER_GUIDE.md)
# Comment out the credentials above and configure SECRETS section below

# Bluesky API Credentials
# HOW TO GET:
#   1. Login to https://bsky.app
#   2. Go to Settings → App Passwords (or https://bsky.app/settings/app-passwords)
#   3. Click "Add App Password"
#   4. Name: "Stream Daemon"
#   5. Copy the generated password
#   6. IMPORTANT: This is an APP PASSWORD, NOT your main account password!
# 
# NOTE FROM THE DEVELOPER:
#   Bluesky's app password approach is functional but frustrating. I eagerly await
#   proper OAuth 2.0 support for the masses. Currently, OAuth is only available to
#   those who self-host their own Personal Data Servers (PDS), which is overkill
#   for most users. Once Bluesky releases OAuth for everyone, we'll update to use it!
BLUESKY_ENABLE_POSTING=False
BLUESKY_HANDLE=yourname.bsky.social
# Option 1: Set app password directly (for testing/local development)
BLUESKY_APP_PASSWORD=your_bluesky_app_password
# Option 2: Use secrets manager (RECOMMENDED - see DOPPLER_GUIDE.md)
# Comment out the app password above and configure SECRETS section below

# Discord Webhook
# HOW TO GET:
#   1. Go to your Discord server (you must have admin/manage webhooks permission)
#   2. Right-click the channel where you want stream announcements
#   3. Click "Edit Channel" → "Integrations" → "Webhooks"
#   4. Click "Create Webhook" (or "New Webhook")
#   5. Customize name/avatar (optional)
#   6. Click "Copy Webhook URL"
# 
# FLEXIBILITY OPTIONS:
#   • Single webhook for all platforms: Set only discord_webhook_url
#   • Per-platform webhooks: Set discord_webhook_twitch, discord_webhook_youtube, discord_webhook_kick
#   • Mixed: Use discord_webhook_url as default, override specific platforms with per-platform webhooks
# 
# DOPPLER SECRET NAMING (use lowercase with underscores):
#   {
#     "discord_webhook_url": "https://discord.com/api/webhooks/123/abc",
#     "discord_webhook_twitch": "https://discord.com/api/webhooks/456/def",
#     "discord_role": "1234567890",
#     "discord_role_twitch": "9876543210"
#   }
DISCORD_ENABLE_POSTING=False

# Default webhook (used for all platforms unless per-platform webhook is specified)
DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/YOUR_WEBHOOK_ID/YOUR_WEBHOOK_TOKEN

# Per-platform webhooks (OPTIONAL - overrides default webhook for specific platforms)
# Leave commented out if you want all platforms to use the same webhook
#DISCORD_WEBHOOK_TWITCH=https://discord.com/api/webhooks/TWITCH_WEBHOOK_ID/TWITCH_WEBHOOK_TOKEN
#DISCORD_WEBHOOK_YOUTUBE=https://discord.com/api/webhooks/YOUTUBE_WEBHOOK_ID/YOUTUBE_WEBHOOK_TOKEN
#DISCORD_WEBHOOK_KICK=https://discord.com/api/webhooks/KICK_WEBHOOK_ID/KICK_WEBHOOK_TOKEN

# Discord Role Mentions (OPTIONAL)
# Pings specific roles when going live
# HOW TO GET ROLE IDs:
#   1. Enable Developer Mode: User Settings → Advanced → Developer Mode (ON)
#   2. Right-click any role in Server Settings → Roles → "Copy Role ID"
# 
# FLEXIBILITY OPTIONS:
#   • Single role for all platforms: Set only discord_role
#   • Per-platform roles: Set discord_role_twitch, discord_role_youtube, discord_role_kick
#   • Mixed: Use discord_role as default, override specific platforms with per-platform roles
#   • No mentions: Leave all commented out

# Default role (used for all platforms unless per-platform role is specified)
#DISCORD_ROLE=1234567890123456789

# Per-platform roles (OPTIONAL - overrides default role for specific platforms)
#DISCORD_ROLE_TWITCH=1234567890123456789
#DISCORD_ROLE_YOUTUBE=9876543210987654321
#DISCORD_ROLE_KICK=5555555555555555555

# Matrix Protocol
# HOW TO GET:
#   1. Create a Matrix account at https://app.element.io or your Matrix server
#   2. Create a room for stream announcements (e.g., "Stream Notifications")
#   3. Get your access token:
#      - Element Web: Settings → Help & About → Advanced → Access Token (click "Click to reveal")
#      - Or via API: curl -XPOST -d '{"type":"m.login.password", "user":"USERNAME", "password":"PASSWORD"}' "https://matrix.org/_matrix/client/r0/login"
#   4. Get Room ID:
#      - Element: Room Settings → Advanced → Internal Room ID (looks like !abc123:matrix.org)
# 
# DOPPLER SECRET NAMING (use lowercase with underscores):
#   {
#     "matrix_homeserver": "https://matrix.org",
#     "matrix_access_token": "syt_abc123...",
#     "matrix_room_id": "!abc123:matrix.org"
#   }
# 
# IMPORTANT: Access tokens are sensitive! Use a secrets manager in production.
# You can also use an app-specific password if your homeserver supports it.
MATRIX_ENABLE_POSTING=False

# Default Matrix configuration (used for all platforms)
MATRIX_HOMESERVER=https://matrix.org
MATRIX_ACCESS_TOKEN=your_access_token_here
MATRIX_ROOM_ID=!your_room_id:matrix.org

# ===========================================
# SECRET MANAGER (Optional)
# ===========================================
# Options: None, aws, vault, doppler
SECRETS_SECRET_MANAGER=None

# AWS Secrets Manager Configuration
# When enabled, credentials are loaded from AWS Secrets Manager
# The secret should be JSON with keys matching the credential names
# Example for Twitch: {"client_id": "abc123", "client_secret": "xyz789"}
SECRETS_AWS_TWITCH_SECRET_NAME=twitch-api-keys
SECRETS_AWS_YOUTUBE_SECRET_NAME=youtube-api-keys
SECRETS_AWS_KICK_SECRET_NAME=kick-api-keys
SECRETS_AWS_MASTODON_SECRET_NAME=mastodon-api-keys
SECRETS_AWS_BLUESKY_SECRET_NAME=bluesky-api-keys
SECRETS_AWS_DISCORD_SECRET_NAME=discord-webhook
SECRETS_AWS_MATRIX_SECRET_NAME=matrix-credentials

# HashiCorp Vault Configuration
# When enabled, credentials are loaded from Vault KV v2
# The secret should have data fields matching the credential names
SECRETS_VAULT_URL=https://vault.example.com
SECRETS_VAULT_TOKEN=your_vault_token
SECRETS_VAULT_TWITCH_SECRET_PATH=secret/twitch
SECRETS_VAULT_YOUTUBE_SECRET_PATH=secret/youtube
SECRETS_VAULT_KICK_SECRET_PATH=secret/kick
SECRETS_VAULT_MASTODON_SECRET_PATH=secret/mastodon
SECRETS_VAULT_BLUESKY_SECRET_PATH=secret/bluesky
SECRETS_VAULT_DISCORD_SECRET_PATH=secret/discord
SECRETS_VAULT_MATRIX_SECRET_PATH=secret/matrix

# Doppler Configuration
# When enabled, Doppler fetches secrets by name from your Doppler project/config
# 
# IMPORTANT: Doppler Token is ENVIRONMENT-SPECIFIC
#   - Tokens are tied to a specific Doppler environment (dev, stg, prd)
#   - A 'dev' token only accesses 'dev' secrets
#   - Generate separate tokens for different environments
#   - For most users, the 'dev' environment is sufficient
#
# How to get your Doppler token:
#   1. Go to Doppler dashboard → Access → Service Tokens
#   2. Click "Generate Service Token"
#   3. Select environment: 'dev' (recommended) or 'prd' for production
#   4. Copy the token (starts with dp.st.)
#
# See DOPPLER_GUIDE.md for complete setup instructions
DOPPLER_TOKEN=dp.st.your_token_here
DOPPLER_PROJECT=stream-daemon
DOPPLER_CONFIG=dev
SECRETS_DOPPLER_TWITCH_SECRET_NAME=twitch
SECRETS_DOPPLER_YOUTUBE_SECRET_NAME=youtube
SECRETS_DOPPLER_KICK_SECRET_NAME=kick
SECRETS_DOPPLER_MASTODON_SECRET_NAME=mastodon
SECRETS_DOPPLER_BLUESKY_SECRET_NAME=bluesky
SECRETS_DOPPLER_DISCORD_SECRET_NAME=discord
SECRETS_DOPPLER_MATRIX_SECRET_NAME=matrix

# ===========================================
# SETTINGS
# ===========================================
# CHECK_INTERVAL: How often to check stream status when OFFLINE (in minutes)
# Lower = faster detection when you go live, but more API calls
# Recommended: 3-5 minutes (balance between speed and API usage)
SETTINGS_CHECK_INTERVAL=5

# POST_INTERVAL: How often to check stream status when LIVE (in minutes)
# Lower = faster detection when stream ends, but more API calls
# Recommended: 2-5 minutes (you want to know quickly when stream ends!)
# NOTE: This should typically be SAME or LOWER than CHECK_INTERVAL
SETTINGS_POST_INTERVAL=5
