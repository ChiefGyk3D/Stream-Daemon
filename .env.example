# Stream Daemon Environment Variables
# Copy this file to .env and fill in your values
# NEVER commit .env to git!
#
# CONFIGURATION PHILOSOPHY:
# - Non-sensitive settings (usernames, URLs, flags) are set directly as env vars
# - Sensitive credentials (API keys, tokens, webhooks) can be:
#   1. Set directly as env vars (TWITCH_CLIENT_ID, etc.) OR
#   2. Loaded from secrets managers (AWS/Vault/Doppler)
# - If using a secrets manager, only configure the secret names/paths
# - Environment variables ALWAYS take priority over secrets managers

# =====================================
# STREAMING PLATFORMS (At least ONE required)
# =====================================

# Twitch API Credentials
TWITCH_ENABLE=True
TWITCH_USERNAME=your_twitch_username
# Option 1: Set credentials directly (not recommended for production)
TWITCH_CLIENT_ID=YOUR_TWITCH_CLIENT_ID
TWITCH_CLIENT_SECRET=YOUR_TWITCH_CLIENT_SECRET
# Option 2: Use secrets manager (configure in SECRETS section below)

# YouTube Live API Credentials
YOUTUBE_ENABLE=False
YOUTUBE_USERNAME=@YourChannelHandle
# YOUTUBE_CHANNEL_ID is OPTIONAL - will be auto-resolved from username
# Only set this if you want to skip the channel lookup (slightly faster)
# YOUTUBE_CHANNEL_ID=YOUR_YOUTUBE_CHANNEL_ID
# Option 1: Set API key directly (not recommended for production)
YOUTUBE_API_KEY=YOUR_YOUTUBE_API_KEY
# Option 2: Use secrets manager (configure in SECRETS section below)

# Kick.com Credentials
KICK_ENABLE=False
KICK_USERNAME=your_kick_username
# Optional: Kick authentication for better rate limits (recommended)
# Option 1: Set credentials directly (not recommended for production)
KICK_CLIENT_ID=YOUR_KICK_CLIENT_ID
KICK_CLIENT_SECRET=YOUR_KICK_CLIENT_SECRET
# Option 2: Use secrets manager (configure in SECRETS section below)

# ===========================================
# MESSAGE FILES
# ===========================================
# Consolidated message files with platform sections
# Format: Use [PLATFORM] sections for platform-specific messages, or [DEFAULT] for all
# Example:
#   [DEFAULT]
#   Generic message 1
#   [TWITCH]
#   Twitch-specific message 1
MESSAGES_MESSAGES_FILE=messages.txt
MESSAGES_END_MESSAGES_FILE=end_messages.txt
MESSAGES_POST_END_STREAM_MESSAGE=True

# Control whether to use platform-specific sections or always use [DEFAULT]
# If true: Uses [TWITCH], [YOUTUBE], [KICK] sections when available, falls back to [DEFAULT]
# If false: Always uses [DEFAULT] section for all platforms (same message everywhere)
MESSAGES_USE_PLATFORM_SPECIFIC_MESSAGES=True

# =====================================
# SOCIAL PLATFORMS (At least ONE required)
# =====================================

# Mastodon API Credentials
MASTODON_ENABLE_POSTING=True
MASTODON_APP_NAME=StreamDaemon
MASTODON_API_BASE_URL=https://mastodon.social
# Option 1: Set credentials directly (not recommended for production)
MASTODON_CLIENT_ID=your_mastodon_client_id
MASTODON_CLIENT_SECRET=your_mastodon_client_secret
MASTODON_ACCESS_TOKEN=your_mastodon_access_token
# Option 2: Use secrets manager (configure in SECRETS section below)

# Bluesky API Credentials
BLUESKY_ENABLE_POSTING=False
BLUESKY_HANDLE=yourname.bsky.social
# Option 1: Set app password directly (not recommended for production)
BLUESKY_APP_PASSWORD=your_bluesky_app_password
# Option 2: Use secrets manager (configure in SECRETS section below)

# Discord Webhook
DISCORD_ENABLE_POSTING=False
# Option 1: Set webhook URL directly (not recommended for production)
DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/YOUR_WEBHOOK_URL
# Option 2: Use secrets manager (configure in SECRETS section below)

# Discord Role Mentions (Optional)
# When a specific platform goes live, mention that role
# Get role IDs by right-clicking a role in Discord (Developer Mode must be enabled)
DISCORD_ROLE_TWITCH=1234567890123456789
DISCORD_ROLE_YOUTUBE=1234567890123456789
DISCORD_ROLE_KICK=1234567890123456789

# Matrix Protocol (Coming Soon)
MATRIX_ENABLE_POSTING=False
MATRIX_HOMESERVER=https://matrix.org
MATRIX_USERNAME=@your:matrix.org
MATRIX_PASSWORD=your_matrix_password
MATRIX_ROOM_ID=!roomid:matrix.org

# ===========================================
# SECRET MANAGER (Optional)
# ===========================================
# Options: None, aws, vault, doppler
SECRETS_SECRET_MANAGER=None

# AWS Secrets Manager Configuration
# When enabled, credentials are loaded from AWS Secrets Manager
# The secret should be JSON with keys matching the credential names
# Example for Twitch: {"client_id": "abc123", "client_secret": "xyz789"}
SECRETS_AWS_TWITCH_SECRET_NAME=twitch-api-keys
SECRETS_AWS_YOUTUBE_SECRET_NAME=youtube-api-keys
SECRETS_AWS_KICK_SECRET_NAME=kick-api-keys
SECRETS_AWS_MASTODON_SECRET_NAME=mastodon-api-keys
SECRETS_AWS_BLUESKY_SECRET_NAME=bluesky-api-keys
SECRETS_AWS_DISCORD_SECRET_NAME=discord-webhook

# HashiCorp Vault Configuration
# When enabled, credentials are loaded from Vault KV v2
# The secret should have data fields matching the credential names
SECRETS_VAULT_URL=https://vault.example.com
SECRETS_VAULT_TOKEN=your_vault_token
SECRETS_VAULT_TWITCH_SECRET_PATH=secret/twitch
SECRETS_VAULT_YOUTUBE_SECRET_PATH=secret/youtube
SECRETS_VAULT_KICK_SECRET_PATH=secret/kick
SECRETS_VAULT_MASTODON_SECRET_PATH=secret/mastodon
SECRETS_VAULT_BLUESKY_SECRET_PATH=secret/bluesky
SECRETS_VAULT_DISCORD_SECRET_PATH=secret/discord

# Doppler Configuration
# When enabled, Doppler fetches secrets by name from your Doppler project/config
# Set your Doppler token and configure which secrets to fetch
DOPPLER_TOKEN=dp.st.your_token_here
DOPPLER_PROJECT=stream-daemon
DOPPLER_CONFIG=prd
SECRETS_DOPPLER_TWITCH_SECRET_NAME=twitch
SECRETS_DOPPLER_YOUTUBE_SECRET_NAME=youtube
SECRETS_DOPPLER_KICK_SECRET_NAME=kick
SECRETS_DOPPLER_MASTODON_SECRET_NAME=mastodon
SECRETS_DOPPLER_BLUESKY_SECRET_NAME=bluesky
SECRETS_DOPPLER_DISCORD_SECRET_NAME=discord

# ===========================================
# SETTINGS
# ===========================================
# CHECK_INTERVAL: How often to check stream status when OFFLINE (in minutes)
# Lower = faster detection when you go live, but more API calls
# Recommended: 3-5 minutes (balance between speed and API usage)
SETTINGS_CHECK_INTERVAL=5

# POST_INTERVAL: How often to check stream status when LIVE (in minutes)
# Lower = faster detection when stream ends, but more API calls
# Recommended: 2-5 minutes (you want to know quickly when stream ends!)
# NOTE: This should typically be SAME or LOWER than CHECK_INTERVAL
SETTINGS_POST_INTERVAL=5
